<#
// Copyright (c) Six Labors and contributors.
// Licensed under the Apache License, Version 2.0.
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    void GeneratePackFromMethod(string pixelType, string converterCode)
    {
        #>

			/// <inheritdoc />
            internal override void PackFrom<#=pixelType#>(ReadOnlySpan<<#=pixelType#>> source, Span<Rgba32> destPixels, int count)
            {
                GuardSpans(source, nameof(source), destPixels, nameof(destPixels), count);

                ref <#=pixelType#> sourceRef = ref MemoryMarshal.GetReference(source);
                ref Rgba32 destRef = ref MemoryMarshal.GetReference(destPixels);

                for (int i = 0; i < count; i++)
                {
                    ref <#=pixelType#> sp = ref Unsafe.Add(ref sourceRef, i);
                    ref Rgba32 dp = ref Unsafe.Add(ref destRef, i);
                    <#=converterCode#>
                }
            }
		<#
    }

    void GenerateConvertToMethod(string pixelType, string converterCode)
    {
        #>

			/// <inheritdoc />
            internal override void To<#=pixelType#>(ReadOnlySpan<Rgba32> sourcePixels, Span<<#=pixelType#>> dest, int count)
            {
                GuardSpans(sourcePixels, nameof(sourcePixels), dest, nameof(dest), count);

                ref Rgba32 sourceRef = ref MemoryMarshal.GetReference(sourcePixels);
                ref <#=pixelType#> destRef = ref MemoryMarshal.GetReference(dest);

                for (int i = 0; i < count; i++)
                {
                    ref Rgba32 sp = ref Unsafe.Add(ref sourceRef, i);
                    ref <#=pixelType#> dp = ref Unsafe.Add(ref destRef, i);
                    <#=converterCode#>
                }
            }
		<#
    }
#>
// Copyright (c) Six Labors and contributors.
// Licensed under the Apache License, Version 2.0.

// <auto-generated />
namespace SixLabors.ImageSharp.PixelFormats
{
    using System;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;

    /// <content>
    /// Provides optimized overrides for bulk operations.
    /// </content>
    public partial struct Rgba32
    {
        internal partial class PixelOperations
        {
			<#
    GeneratePackFromMethod("Rgb24", "Unsafe.As<Rgba32, Rgb24>(ref dp) = sp; dp.A = 255;");
    GenerateConvertToMethod("Rgb24", "dp = Unsafe.As<Rgba32, Rgb24>(ref sp);");

    GeneratePackFromMethod("Bgr24", "dp.Bgr = sp; dp.A = 255;");
    GenerateConvertToMethod("Bgr24", "dp = sp.Bgr;");
    
    GeneratePackFromMethod("Bgra32", "dp = sp.ToRgba32();");
    GenerateConvertToMethod("Bgra32", "dp = sp.ToBgra32();");

    GeneratePackFromMethod("Argb32", "dp = sp.ToRgba32();");
    GenerateConvertToMethod("Argb32", "dp = sp.ToArgb32();");
			#>

		}
	}
}