






// Copyright (c) Six Labors and contributors.
// Licensed under the Apache License, Version 2.0.

// <auto-generated />
using System;
using System.Numerics;
using System.Buffers;

using SixLabors.ImageSharp.Memory;
using SixLabors.Memory;

namespace SixLabors.ImageSharp.PixelFormats.PixelBlenders
{
    /// <summary>
    /// Collection of Porter Duff alpha blending functions applying different composition models.
    /// </summary>
    /// <remarks>
    /// These functions are designed to be a general solution for all color cases,
    /// that is, they take in account the alpha value of both the backdrop
    /// and source, and there's no need to alpha-premultiply neither the backdrop
    /// nor the source.
    /// Note there are faster functions for when the backdrop color is known
    /// to be opaque
    /// </remarks>
    internal static class DefaultPixelBlenders<TPixel>
        where TPixel : struct, IPixel<TPixel>
    {


            internal class NormalSrc : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static NormalSrc Instance { get; } = new NormalSrc();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.NormalSrc(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalSrc(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalSrc(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class MultiplySrc : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static MultiplySrc Instance { get; } = new MultiplySrc();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.MultiplySrc(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplySrc(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplySrc(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class AddSrc : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static AddSrc Instance { get; } = new AddSrc();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.AddSrc(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddSrc(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddSrc(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class SubtractSrc : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static SubtractSrc Instance { get; } = new SubtractSrc();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.SubtractSrc(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractSrc(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractSrc(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class ScreenSrc : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static ScreenSrc Instance { get; } = new ScreenSrc();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.ScreenSrc(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenSrc(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenSrc(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class DarkenSrc : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static DarkenSrc Instance { get; } = new DarkenSrc();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.DarkenSrc(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenSrc(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenSrc(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class LightenSrc : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static LightenSrc Instance { get; } = new LightenSrc();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.LightenSrc(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenSrc(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenSrc(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class OverlaySrc : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static OverlaySrc Instance { get; } = new OverlaySrc();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.OverlaySrc(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlaySrc(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlaySrc(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class HardLightSrc : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static HardLightSrc Instance { get; } = new HardLightSrc();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.HardLightSrc(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightSrc(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightSrc(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class NormalSrcAtop : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static NormalSrcAtop Instance { get; } = new NormalSrcAtop();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.NormalSrcAtop(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalSrcAtop(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalSrcAtop(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class MultiplySrcAtop : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static MultiplySrcAtop Instance { get; } = new MultiplySrcAtop();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.MultiplySrcAtop(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplySrcAtop(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplySrcAtop(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class AddSrcAtop : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static AddSrcAtop Instance { get; } = new AddSrcAtop();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.AddSrcAtop(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddSrcAtop(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddSrcAtop(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class SubtractSrcAtop : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static SubtractSrcAtop Instance { get; } = new SubtractSrcAtop();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.SubtractSrcAtop(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractSrcAtop(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractSrcAtop(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class ScreenSrcAtop : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static ScreenSrcAtop Instance { get; } = new ScreenSrcAtop();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.ScreenSrcAtop(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenSrcAtop(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenSrcAtop(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class DarkenSrcAtop : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static DarkenSrcAtop Instance { get; } = new DarkenSrcAtop();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.DarkenSrcAtop(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenSrcAtop(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenSrcAtop(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class LightenSrcAtop : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static LightenSrcAtop Instance { get; } = new LightenSrcAtop();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.LightenSrcAtop(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenSrcAtop(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenSrcAtop(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class OverlaySrcAtop : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static OverlaySrcAtop Instance { get; } = new OverlaySrcAtop();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.OverlaySrcAtop(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlaySrcAtop(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlaySrcAtop(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class HardLightSrcAtop : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static HardLightSrcAtop Instance { get; } = new HardLightSrcAtop();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.HardLightSrcAtop(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightSrcAtop(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightSrcAtop(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class NormalSrcOver : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static NormalSrcOver Instance { get; } = new NormalSrcOver();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.NormalSrcOver(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalSrcOver(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalSrcOver(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class MultiplySrcOver : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static MultiplySrcOver Instance { get; } = new MultiplySrcOver();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.MultiplySrcOver(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplySrcOver(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplySrcOver(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class AddSrcOver : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static AddSrcOver Instance { get; } = new AddSrcOver();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.AddSrcOver(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddSrcOver(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddSrcOver(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class SubtractSrcOver : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static SubtractSrcOver Instance { get; } = new SubtractSrcOver();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.SubtractSrcOver(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractSrcOver(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractSrcOver(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class ScreenSrcOver : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static ScreenSrcOver Instance { get; } = new ScreenSrcOver();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.ScreenSrcOver(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenSrcOver(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenSrcOver(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class DarkenSrcOver : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static DarkenSrcOver Instance { get; } = new DarkenSrcOver();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.DarkenSrcOver(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenSrcOver(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenSrcOver(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class LightenSrcOver : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static LightenSrcOver Instance { get; } = new LightenSrcOver();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.LightenSrcOver(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenSrcOver(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenSrcOver(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class OverlaySrcOver : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static OverlaySrcOver Instance { get; } = new OverlaySrcOver();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.OverlaySrcOver(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlaySrcOver(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlaySrcOver(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class HardLightSrcOver : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static HardLightSrcOver Instance { get; } = new HardLightSrcOver();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.HardLightSrcOver(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightSrcOver(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightSrcOver(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class NormalSrcIn : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static NormalSrcIn Instance { get; } = new NormalSrcIn();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.NormalSrcIn(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalSrcIn(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalSrcIn(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class MultiplySrcIn : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static MultiplySrcIn Instance { get; } = new MultiplySrcIn();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.MultiplySrcIn(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplySrcIn(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplySrcIn(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class AddSrcIn : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static AddSrcIn Instance { get; } = new AddSrcIn();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.AddSrcIn(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddSrcIn(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddSrcIn(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class SubtractSrcIn : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static SubtractSrcIn Instance { get; } = new SubtractSrcIn();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.SubtractSrcIn(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractSrcIn(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractSrcIn(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class ScreenSrcIn : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static ScreenSrcIn Instance { get; } = new ScreenSrcIn();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.ScreenSrcIn(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenSrcIn(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenSrcIn(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class DarkenSrcIn : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static DarkenSrcIn Instance { get; } = new DarkenSrcIn();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.DarkenSrcIn(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenSrcIn(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenSrcIn(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class LightenSrcIn : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static LightenSrcIn Instance { get; } = new LightenSrcIn();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.LightenSrcIn(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenSrcIn(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenSrcIn(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class OverlaySrcIn : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static OverlaySrcIn Instance { get; } = new OverlaySrcIn();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.OverlaySrcIn(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlaySrcIn(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlaySrcIn(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class HardLightSrcIn : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static HardLightSrcIn Instance { get; } = new HardLightSrcIn();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.HardLightSrcIn(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightSrcIn(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightSrcIn(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class NormalSrcOut : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static NormalSrcOut Instance { get; } = new NormalSrcOut();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.NormalSrcOut(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalSrcOut(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalSrcOut(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class MultiplySrcOut : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static MultiplySrcOut Instance { get; } = new MultiplySrcOut();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.MultiplySrcOut(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplySrcOut(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplySrcOut(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class AddSrcOut : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static AddSrcOut Instance { get; } = new AddSrcOut();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.AddSrcOut(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddSrcOut(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddSrcOut(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class SubtractSrcOut : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static SubtractSrcOut Instance { get; } = new SubtractSrcOut();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.SubtractSrcOut(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractSrcOut(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractSrcOut(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class ScreenSrcOut : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static ScreenSrcOut Instance { get; } = new ScreenSrcOut();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.ScreenSrcOut(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenSrcOut(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenSrcOut(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class DarkenSrcOut : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static DarkenSrcOut Instance { get; } = new DarkenSrcOut();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.DarkenSrcOut(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenSrcOut(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenSrcOut(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class LightenSrcOut : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static LightenSrcOut Instance { get; } = new LightenSrcOut();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.LightenSrcOut(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenSrcOut(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenSrcOut(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class OverlaySrcOut : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static OverlaySrcOut Instance { get; } = new OverlaySrcOut();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.OverlaySrcOut(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlaySrcOut(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlaySrcOut(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class HardLightSrcOut : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static HardLightSrcOut Instance { get; } = new HardLightSrcOut();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.HardLightSrcOut(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightSrcOut(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightSrcOut(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class NormalDest : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static NormalDest Instance { get; } = new NormalDest();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.NormalDest(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalDest(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalDest(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class MultiplyDest : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static MultiplyDest Instance { get; } = new MultiplyDest();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.MultiplyDest(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplyDest(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplyDest(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class AddDest : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static AddDest Instance { get; } = new AddDest();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.AddDest(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddDest(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddDest(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class SubtractDest : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static SubtractDest Instance { get; } = new SubtractDest();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.SubtractDest(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractDest(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractDest(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class ScreenDest : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static ScreenDest Instance { get; } = new ScreenDest();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.ScreenDest(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenDest(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenDest(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class DarkenDest : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static DarkenDest Instance { get; } = new DarkenDest();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.DarkenDest(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenDest(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenDest(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class LightenDest : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static LightenDest Instance { get; } = new LightenDest();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.LightenDest(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenDest(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenDest(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class OverlayDest : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static OverlayDest Instance { get; } = new OverlayDest();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.OverlayDest(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlayDest(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlayDest(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class HardLightDest : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static HardLightDest Instance { get; } = new HardLightDest();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.HardLightDest(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightDest(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightDest(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class NormalDestAtop : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static NormalDestAtop Instance { get; } = new NormalDestAtop();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.NormalDestAtop(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalDestAtop(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalDestAtop(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class MultiplyDestAtop : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static MultiplyDestAtop Instance { get; } = new MultiplyDestAtop();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.MultiplyDestAtop(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplyDestAtop(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplyDestAtop(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class AddDestAtop : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static AddDestAtop Instance { get; } = new AddDestAtop();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.AddDestAtop(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddDestAtop(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddDestAtop(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class SubtractDestAtop : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static SubtractDestAtop Instance { get; } = new SubtractDestAtop();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.SubtractDestAtop(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractDestAtop(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractDestAtop(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class ScreenDestAtop : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static ScreenDestAtop Instance { get; } = new ScreenDestAtop();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.ScreenDestAtop(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenDestAtop(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenDestAtop(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class DarkenDestAtop : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static DarkenDestAtop Instance { get; } = new DarkenDestAtop();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.DarkenDestAtop(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenDestAtop(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenDestAtop(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class LightenDestAtop : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static LightenDestAtop Instance { get; } = new LightenDestAtop();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.LightenDestAtop(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenDestAtop(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenDestAtop(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class OverlayDestAtop : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static OverlayDestAtop Instance { get; } = new OverlayDestAtop();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.OverlayDestAtop(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlayDestAtop(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlayDestAtop(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class HardLightDestAtop : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static HardLightDestAtop Instance { get; } = new HardLightDestAtop();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.HardLightDestAtop(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightDestAtop(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightDestAtop(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class NormalDestOver : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static NormalDestOver Instance { get; } = new NormalDestOver();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.NormalDestOver(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalDestOver(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalDestOver(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class MultiplyDestOver : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static MultiplyDestOver Instance { get; } = new MultiplyDestOver();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.MultiplyDestOver(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplyDestOver(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplyDestOver(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class AddDestOver : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static AddDestOver Instance { get; } = new AddDestOver();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.AddDestOver(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddDestOver(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddDestOver(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class SubtractDestOver : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static SubtractDestOver Instance { get; } = new SubtractDestOver();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.SubtractDestOver(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractDestOver(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractDestOver(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class ScreenDestOver : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static ScreenDestOver Instance { get; } = new ScreenDestOver();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.ScreenDestOver(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenDestOver(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenDestOver(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class DarkenDestOver : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static DarkenDestOver Instance { get; } = new DarkenDestOver();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.DarkenDestOver(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenDestOver(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenDestOver(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class LightenDestOver : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static LightenDestOver Instance { get; } = new LightenDestOver();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.LightenDestOver(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenDestOver(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenDestOver(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class OverlayDestOver : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static OverlayDestOver Instance { get; } = new OverlayDestOver();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.OverlayDestOver(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlayDestOver(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlayDestOver(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class HardLightDestOver : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static HardLightDestOver Instance { get; } = new HardLightDestOver();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.HardLightDestOver(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightDestOver(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightDestOver(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class NormalDestIn : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static NormalDestIn Instance { get; } = new NormalDestIn();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.NormalDestIn(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalDestIn(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalDestIn(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class MultiplyDestIn : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static MultiplyDestIn Instance { get; } = new MultiplyDestIn();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.MultiplyDestIn(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplyDestIn(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplyDestIn(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class AddDestIn : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static AddDestIn Instance { get; } = new AddDestIn();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.AddDestIn(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddDestIn(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddDestIn(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class SubtractDestIn : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static SubtractDestIn Instance { get; } = new SubtractDestIn();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.SubtractDestIn(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractDestIn(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractDestIn(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class ScreenDestIn : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static ScreenDestIn Instance { get; } = new ScreenDestIn();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.ScreenDestIn(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenDestIn(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenDestIn(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class DarkenDestIn : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static DarkenDestIn Instance { get; } = new DarkenDestIn();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.DarkenDestIn(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenDestIn(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenDestIn(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class LightenDestIn : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static LightenDestIn Instance { get; } = new LightenDestIn();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.LightenDestIn(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenDestIn(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenDestIn(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class OverlayDestIn : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static OverlayDestIn Instance { get; } = new OverlayDestIn();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.OverlayDestIn(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlayDestIn(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlayDestIn(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class HardLightDestIn : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static HardLightDestIn Instance { get; } = new HardLightDestIn();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.HardLightDestIn(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightDestIn(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightDestIn(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class NormalDestOut : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static NormalDestOut Instance { get; } = new NormalDestOut();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.NormalDestOut(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalDestOut(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalDestOut(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class MultiplyDestOut : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static MultiplyDestOut Instance { get; } = new MultiplyDestOut();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.MultiplyDestOut(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplyDestOut(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplyDestOut(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class AddDestOut : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static AddDestOut Instance { get; } = new AddDestOut();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.AddDestOut(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddDestOut(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddDestOut(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class SubtractDestOut : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static SubtractDestOut Instance { get; } = new SubtractDestOut();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.SubtractDestOut(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractDestOut(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractDestOut(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class ScreenDestOut : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static ScreenDestOut Instance { get; } = new ScreenDestOut();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.ScreenDestOut(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenDestOut(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenDestOut(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class DarkenDestOut : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static DarkenDestOut Instance { get; } = new DarkenDestOut();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.DarkenDestOut(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenDestOut(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenDestOut(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class LightenDestOut : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static LightenDestOut Instance { get; } = new LightenDestOut();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.LightenDestOut(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenDestOut(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenDestOut(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class OverlayDestOut : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static OverlayDestOut Instance { get; } = new OverlayDestOut();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.OverlayDestOut(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlayDestOut(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlayDestOut(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class HardLightDestOut : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static HardLightDestOut Instance { get; } = new HardLightDestOut();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.HardLightDestOut(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightDestOut(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightDestOut(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class NormalClear : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static NormalClear Instance { get; } = new NormalClear();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.NormalClear(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalClear(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalClear(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class MultiplyClear : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static MultiplyClear Instance { get; } = new MultiplyClear();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.MultiplyClear(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplyClear(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplyClear(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class AddClear : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static AddClear Instance { get; } = new AddClear();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.AddClear(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddClear(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddClear(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class SubtractClear : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static SubtractClear Instance { get; } = new SubtractClear();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.SubtractClear(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractClear(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractClear(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class ScreenClear : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static ScreenClear Instance { get; } = new ScreenClear();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.ScreenClear(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenClear(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenClear(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class DarkenClear : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static DarkenClear Instance { get; } = new DarkenClear();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.DarkenClear(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenClear(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenClear(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class LightenClear : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static LightenClear Instance { get; } = new LightenClear();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.LightenClear(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenClear(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenClear(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class OverlayClear : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static OverlayClear Instance { get; } = new OverlayClear();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.OverlayClear(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlayClear(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlayClear(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class HardLightClear : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static HardLightClear Instance { get; } = new HardLightClear();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.HardLightClear(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightClear(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightClear(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class NormalXor : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static NormalXor Instance { get; } = new NormalXor();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.NormalXor(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalXor(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.NormalXor(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class MultiplyXor : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static MultiplyXor Instance { get; } = new MultiplyXor();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.MultiplyXor(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplyXor(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.MultiplyXor(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class AddXor : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static AddXor Instance { get; } = new AddXor();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.AddXor(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddXor(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.AddXor(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class SubtractXor : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static SubtractXor Instance { get; } = new SubtractXor();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.SubtractXor(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractXor(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.SubtractXor(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class ScreenXor : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static ScreenXor Instance { get; } = new ScreenXor();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.ScreenXor(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenXor(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.ScreenXor(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class DarkenXor : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static DarkenXor Instance { get; } = new DarkenXor();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.DarkenXor(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenXor(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.DarkenXor(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class LightenXor : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static LightenXor Instance { get; } = new LightenXor();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.LightenXor(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenXor(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.LightenXor(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class OverlayXor : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static OverlayXor Instance { get; } = new OverlayXor();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.OverlayXor(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlayXor(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.OverlayXor(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


            internal class HardLightXor : PixelBlender<TPixel>
            {
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static HardLightXor Instance { get; } = new HardLightXor();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    TPixel dest = default;
                    dest.PackFromScaledVector4(PorterDuffFunctions.HardLightXor(background.ToScaledVector4(), source.ToScaledVector4(), amount.Clamp(0, 1)));
                    return dest;                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)                
                {
                    amount = amount.Clamp(0, 1);
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightXor(background[i], source[i], amount);
                    }                    
                }

                /// <inheritdoc />
                protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)                
                {
                    for (int i = 0; i < destination.Length; i++)
                    {
                        destination[i] = PorterDuffFunctions.HardLightXor(background[i], source[i], amount[i].Clamp(0, 1));
                    }                    
                }
            }


    }
}